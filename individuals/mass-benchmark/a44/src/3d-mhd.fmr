dimension :: 3
axes :: x,y,z

double :: π = 3.141592653589793
double :: dens0 = 1.0
double :: dp_ddens = 1
double :: dp_ds    = 2/5
double :: dt = 0.1/(NX >? NY >? NZ)
double :: dx = 1/NX, dy = 1/NY, dz = 1/NZ
double :: c_h = dx/dt
double :: ch2_cp2 = c_h / 0.18

ddx = fun(a) (a[i-2] + 8*a[i+1] - 8*a[i-1] - a[i+2])/(12*dx)
ddy = fun(a) (a[,i-2] + 8*a[,i+1] - 8*a[,i-1] - a[,i+2])/(12*dy)
ddz = fun(a) (a[,,i-2] + 8*a[,,i+1] - 8*a[,,i-1] - a[,,i+2])/(12*dy)

∂ = (ddx,ddy,ddz)

ddx2nd = fun(a) (a[i+1/2] - a[i-1/2])    /dx
ddy2nd = fun(a) (a[,i+1/2] - a[,i-1/2])  /dy
ddz2nd = fun(a) (a[,,i+1/2] - a[,,i-1/2])/dz

partial2nd = (ddx2nd, ddy2nd, ddz2nd)

average_x = fun(a) (a[i+1/2]   + a[i-1/2])  /2
average_y = fun(a) (a[,i+1/2]  + a[,i-1/2]) /2
average_z = fun(a) (a[,,i+1/2] + a[,,i-1/2])/2

average = (average_x, average_y, average_z)

del=((1,0,0),(0,1,0),(0,0,1))

Σ = fun (e) e(0)+e(1)+e(2)


begin function init() returns (dens, vx, vy, vz, Bx, By, Bz ,s, Psi)
      double [] :: dens = 0, vx = 0, vy = 0, vz = 0, Bx = 0, By = 0, Bz = 0,s = 0,Psi=0
end function

vec = fun (e) (e 0, e 1, e 2)


begin function av_flux(uu_num, uu_den) returns f
  Phi = if uu_num * uu_den <= 0 then 0 else (1 <? (0 >? 1 + 0.75 *(uu_num / uu_den - 1)))
  f = -0.15*Phi*uu_num
#  Phi = if uu_num * uu_den <= 0 then 0 else (1 <? (0 >? 1 + 2 *(uu_num / uu_den - 1)))
#  f = -0.5*Phi*uu_num
end function

begin function av_flux_x(u) returns (av_flux(num,den))
  um[i] = u[i-1]
  up[i] = u[i+1]
  delta_u[i] = (up-um)/2 <% 1.4*(up-u) <% 1.4*(u-um)
  u_l[i+1/2] = u[i] + 0.5 * delta_u[i]
  u_r[i-1/2] = u[i] - 0.5 * delta_u[i]

  num[i+1/2] = u_r[i+1/2]-u_l[i+1/2]
  den[i+1/2] = u[i+1]-u[i]
end function

begin function av_flux_y(u) returns (av_flux(num,den))
  um[i,j] = u[i,j-1]
  up[i,j] = u[i,j+1]
  delta_u[i,j] = (up-um)/2 <% 1.4*(up-u) <% 1.4*(u-um)
  u_l[i,j+1/2] = u[i,j] + 0.5 * delta_u[i,j]
  u_r[i,j-1/2] = u[i,j] - 0.5 * delta_u[i,j]

  num[i,j+1/2] = u_r[i,j+1/2]-u_l[i,j+1/2]
  den[i,j+1/2] = u[i,j+1]-u[i,j]
end function

begin function av_flux_z(u) returns (av_flux(num,den))
  um[i,j,k] = u[i,j,k-1]
  up[i,j,k] = u[i,j,k+1]
  delta_u[i,j,k] = (up-um)/2 <% 1.4*(up-u) <% 1.4*(u-um)
  u_l[i,j,k+1/2] = u[i,j,k] + 0.5 * delta_u[i,j,k]
  u_r[i,j,k-1/2] = u[i,j,k] - 0.5 * delta_u[i,j,k]

  num[i,j,k+1/2] = u_r[i,j,k+1/2]-u_l[i,j,k+1/2]
  den[i,j,k+1/2] = u[i,j,k+1]-u[i,j,k]
end function




begin function ddt_sys(dens1, v, B, s, Psi)\
  returns (ddt_dens, ddt_v, ddt_B, ddt_s, ddt_Psi)

  dens = dens0 + dens1

  ddt_dens = - Σ fun(i) ∂ i (dens * v i)

  ddt_v = vec fun(i)  -(Σ fun(j) v j * ∂ i (v i))  \
         - ∂ i (dp_ddens * dens + dp_ds * s + 1/(8*π) * Σ fun(j) B j * B j)/dens \
         + 1/(4*π) * (Σ fun(j) ∂ j (B j * B i)  )/dens

  ddt_B = vec fun(i) Σ fun(j) ∂ j (-0*(del i j) * Psi + v i * B j - v j * B i)

  ddt_s = Σ fun(j) v j * ∂ j s

  ddt_Psi = - c_h*c_h * (Σ fun(i) ∂ i (B i)) - ch2_cp2 * Psi
end function

begin function step(dens, vx, vy, vz, Bx,By,Bz, s, Psi) \
  returns (dens_next, vx_next, vy_next, vz_next, Bx_next, By_next, Bz_next, s_next, Psi_next)

      v = (vx, vy, vz)
      B = (Bx, By, Bz)

      sys_0 = (dens, v, B, s, Psi)

      manifest :: sys_q4 = sys_0 + dt/4 * ddt_sys(sys_0)

      manifest :: sys_q3 = sys_0 + dt/3 * ddt_sys(sys_q4)

      manifest :: sys_q2 = sys_0 + dt/2 * ddt_sys(sys_q3)

      manifest :: sys_next = sys_0 + dt * ddt_sys(sys_q2)

      v_rk = sys_next(1)
      B_rk = sys_next(2)

      avf_x = av_flux_x(sys_next)
      avf_y = av_flux_y(sys_next)
      avf_z = av_flux_z(sys_next)

      manifest :: sys_avx = sys_next + avf_x[i-1/2] - avf_x[i+1/2]
      manifest :: sys_avy = sys_avx + avf_y[,j-1/2] - avf_y[,j+1/2]
      manifest :: sys_avz = sys_avy + avf_z[,,k-1/2] - avf_z[,,k+1/2]


      (dens_next2, v_next, B_next, s_unheated, Psi_next) = sys_avz
      (vx_next, vy_next, vz_next) = v_next
      (Bx_next, By_next, Bz_next) = B_next

      dens_next = dens_next2 >? (-0.9)

      numerical_heat =\
              1/2 * ( (Σ fun(i) v_rk i * v_rk i) - (Σ fun(i) v_next i * v_next i) )   \
             + 1/(8*π*(dens0 + dens)) * ( (Σ fun(i) B_rk i * B_rk i) - (Σ fun(i) B_next i * B_next i) )
      s_next = s_unheated + numerical_heat

end function
