dimension :: 3
axes :: x, y, z

ddx = fun(a) (a[i+1/2,j,k] - a[i-1/2,j,k])
ddy = fun(a) (a[i,j+1/2,k] - a[i,j-1/2,k])
ddz = fun(a) (a[i,j,k+1/2] - a[i,j,k-1/2])

∂ = (ddx,ddy,ddz)

Σ = fun (e) e(0) + e(1) + e(2)

begin function init() returns (U,V)
  double [] :: U = 0, V = 0
end function

begin function step(U,V) returns (U2, V2)
  double :: rU = 0.015, rV = 0.065, rE = 1.0, Du = 2e-5, Dv = 1e-5
  double :: dt = 0.1, dx = 0.01

  double [] ::  dU_dt, dV_dt, dU1_dt, dV1_dt

  dU_dt = -rE * U * V*V + rU * (1-U) + Du/(dx*dx) * Σ fun(i) (∂ i . ∂ i) U
  dV_dt =  rE * U * V*V - rV * V     + Dv/(dx*dx) * Σ fun(i) (∂ i . ∂ i) V

  U1 = U + dt * dU_dt
  V1 = V + dt * dV_dt

  dU1_dt = -rE * U1 * V1*V1 + rU1 * (1-U1) + Du/(dx*dx) * Σ fun(i) (∂ i . ∂ i) U1
  dV1_dt =  rE * U1 * V1*V1 - rV1 * V1     + Dv/(dx*dx) * Σ fun(i) (∂ i . ∂ i) V1

  U2 = U1 + dt * dU1_dt
  V2 = V1 + dt * dV1_dt

end function
